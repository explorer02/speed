input OrderItemQueryInput {
  quantity_gt: Int
  price_gte: Float
  quantity_ne: Int
  price: Float
  price_in: [Float]
  OR: [OrderItemQueryInput!]
  item_gte: ObjectId
  item_ne: ObjectId
  price_ne: Float
  quantity_exists: Boolean
  item: ObjectId
  price_exists: Boolean
  item_nin: [ObjectId]
  price_lte: Float
  quantity_lte: Int
  quantity: Int
  item_lte: ObjectId
  quantity_gte: Int
  item_gt: ObjectId
  item_exists: Boolean
  price_lt: Float
  item_in: [ObjectId]
  quantity_nin: [Int]
  quantity_in: [Int]
  AND: [OrderItemQueryInput!]
  price_gt: Float
  quantity_lt: Int
  price_nin: [Float]
  item_lt: ObjectId
}
input StoreQueryInput {
  name: String
  _id_gt: ObjectId
  _id_gte: ObjectId
  items_in: [StoreItemQueryInput]
  address_exists: Boolean
  address_gte: String
  _id_nin: [ObjectId]
  location_exists: Boolean
  name_ne: String
  location: StoreLocationQueryInput
  name_gte: String
  AND: [StoreQueryInput!]
  name_nin: [String]
  _id_ne: ObjectId
  address: String
  orders_nin: [OrderQueryInput]
  items_nin: [StoreItemQueryInput]
  items_exists: Boolean
  _id_in: [ObjectId]
  address_lt: String
  _id_lt: ObjectId
  name_gt: String
  orders_exists: Boolean
  name_exists: Boolean
  OR: [StoreQueryInput!]
  _id: ObjectId
  orders_in: [OrderQueryInput]
  address_nin: [String]
  address_in: [String]
  _id_exists: Boolean
  _id_lte: ObjectId
  address_gt: String
  orders: [OrderQueryInput]
  name_lte: String
  address_ne: String
  name_lt: String
  items: [StoreItemQueryInput]
  name_in: [String]
  address_lte: String
}
type User {
  _id: ObjectId
  address: UserAddress
  createdOn: DateTime
  linkId: String
  location: UserLocation
  name: String
  orders: [Order]
  phone: String
}
type Item {
  _id: ObjectId
  description: String
  label: String
  unit: String
}
input ItemQueryInput {
  unit_in: [String]
  unit_ne: String
  description_gte: String
  _id: ObjectId
  unit_nin: [String]
  _id_in: [ObjectId]
  _id_ne: ObjectId
  _id_gte: ObjectId
  description_nin: [String]
  label_nin: [String]
  description_exists: Boolean
  _id_gt: ObjectId
  description_gt: String
  _id_lte: ObjectId
  label_lt: String
  unit_lte: String
  label_lte: String
  label_gte: String
  description_in: [String]
  _id_exists: Boolean
  label_gt: String
  unit_exists: Boolean
  description_ne: String
  description_lte: String
  _id_nin: [ObjectId]
  label_exists: Boolean
  OR: [ItemQueryInput!]
  AND: [ItemQueryInput!]
  unit: String
  unit_lt: String
  description_lt: String
  unit_gte: String
  label_ne: String
  description: String
  label: String
  _id_lt: ObjectId
  unit_gt: String
  label_in: [String]
}
type Mutation {
  createOrder(input: OrderInsertInput): Order
  deleteManyItems(query: ItemQueryInput): DeleteManyPayload
  deleteManyOrders(query: OrderQueryInput): DeleteManyPayload
  deleteManyStores(query: StoreQueryInput): DeleteManyPayload
  deleteManyUsers(query: UserQueryInput): DeleteManyPayload
  deleteOneItem(query: ItemQueryInput!): Item
  deleteOneOrder(query: OrderQueryInput!): Order
  deleteOneStore(query: StoreQueryInput!): Store
  deleteOneUser(query: UserQueryInput!): User
  insertManyItems(data: [ItemInsertInput!]!): InsertManyPayload
  insertManyOrders(data: [OrderInsertInput!]!): InsertManyPayload
  insertManyStores(data: [StoreInsertInput!]!): InsertManyPayload
  insertManyUsers(data: [UserInsertInput!]!): InsertManyPayload
  insertOneItem(data: ItemInsertInput!): Item
  insertOneOrder(data: OrderInsertInput!): Order
  insertOneStore(data: StoreInsertInput!): Store
  insertOneUser(data: UserInsertInput!): User
  replaceOneItem(query: ItemQueryInput, data: ItemInsertInput!): Item
  replaceOneOrder(query: OrderQueryInput, data: OrderInsertInput!): Order
  replaceOneStore(query: StoreQueryInput, data: StoreInsertInput!): Store
  replaceOneUser(query: UserQueryInput, data: UserInsertInput!): User
  updateManyItems(query: ItemQueryInput, set: ItemUpdateInput!): UpdateManyPayload
  updateManyOrders(query: OrderQueryInput, set: OrderUpdateInput!): UpdateManyPayload
  updateManyStores(query: StoreQueryInput, set: StoreUpdateInput!): UpdateManyPayload
  updateManyUsers(query: UserQueryInput, set: UserUpdateInput!): UpdateManyPayload
  updateOneItem(query: ItemQueryInput, set: ItemUpdateInput!): Item
  updateOneOrder(set: OrderUpdateInput!, query: OrderQueryInput): Order
  updateOneStore(query: StoreQueryInput, set: StoreUpdateInput!): Store
  updateOneUser(query: UserQueryInput, set: UserUpdateInput!): User
  upsertOneItem(query: ItemQueryInput, data: ItemInsertInput!): Item
  upsertOneOrder(query: OrderQueryInput, data: OrderInsertInput!): Order
  upsertOneStore(query: StoreQueryInput, data: StoreInsertInput!): Store
  upsertOneUser(query: UserQueryInput, data: UserInsertInput!): User
}
input StoreItemInsertInput {
  item: ObjectId
  price: Float
  quantity: Int
}
input OrderUpdateInput {
  user: OrderUserRelationInput
  store: OrderStoreRelationInput
  updatedOn_unset: Boolean
  _id_unset: Boolean
  createdOn_unset: Boolean
  items: [OrderItemUpdateInput]
  totalAmount_inc: Float
  status_unset: Boolean
  totalAmount: Float
  updatedOn: DateTime
  _id: ObjectId
  items_unset: Boolean
  user_unset: Boolean
  store_unset: Boolean
  totalAmount_unset: Boolean
  createdOn: DateTime
  status: String
}
input ItemUpdateInput {
  _id: ObjectId
  _id_unset: Boolean
  description: String
  description_unset: Boolean
  label: String
  label_unset: Boolean
  unit: String
  unit_unset: Boolean
}
input StoreItemQueryInput {
  price_gte: Float
  quantity_in: [Int]
  price_gt: Float
  price_exists: Boolean
  price_ne: Float
  item_lt: ObjectId
  item_exists: Boolean
  item: ObjectId
  quantity: Int
  quantity_lt: Int
  price_lte: Float
  quantity_ne: Int
  item_in: [ObjectId]
  AND: [StoreItemQueryInput!]
  price: Float
  quantity_gte: Int
  price_nin: [Float]
  OR: [StoreItemQueryInput!]
  item_gte: ObjectId
  item_nin: [ObjectId]
  price_lt: Float
  item_lte: ObjectId
  quantity_lte: Int
  item_gt: ObjectId
  price_in: [Float]
  quantity_nin: [Int]
  quantity_exists: Boolean
  item_ne: ObjectId
  quantity_gt: Int
}
input StoreInsertInput {
  address: String
  items: [StoreItemInsertInput]
  location: StoreLocationInsertInput
  name: String
  orders: StoreOrdersRelationInput
  _id: ObjectId
}
input StoreLocationUpdateInput {
  lat_unset: Boolean
  lat_inc: Float
  lng: Float
  lng_inc: Float
  lng_unset: Boolean
  lat: Float
}
enum ItemSortByInput {
  LABEL_ASC
  LABEL_DESC
  UNIT_ASC
  UNIT_DESC
  _ID_ASC
  _ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
}
input OrderItemInsertInput {
  quantity: Int
  item: ObjectId
  price: Float
}
input UserAddressUpdateInput {
  pinCode: String
  city_unset: Boolean
  pinCode_unset: Boolean
  houseNumber: String
  landmark_unset: Boolean
  street_unset: Boolean
  locality: String
  state: String
  area_unset: Boolean
  landmark: String
  area: String
  locality_unset: Boolean
  street: String
  houseNumber_unset: Boolean
  city: String
  state_unset: Boolean
}
scalar DateTime
input StoreLocationQueryInput {
  lng_in: [Float]
  lat_lte: Float
  lat_gt: Float
  lng: Float
  lat: Float
  lng_gte: Float
  lng_nin: [Float]
  lat_nin: [Float]
  lat_lt: Float
  AND: [StoreLocationQueryInput!]
  lng_exists: Boolean
  lat_in: [Float]
  lat_ne: Float
  lat_exists: Boolean
  lat_gte: Float
  lng_lte: Float
  OR: [StoreLocationQueryInput!]
  lng_gt: Float
  lng_lt: Float
  lng_ne: Float
}
type OrderItem {
  item: Item
  price: Float
  quantity: Int
}
input UserAddressInsertInput {
  landmark: String
  locality: String
  pinCode: String
  state: String
  street: String
  area: String
  city: String
  houseNumber: String
}
input StoreUpdateInput {
  location_unset: Boolean
  address_unset: Boolean
  orders: StoreOrdersRelationInput
  _id_unset: Boolean
  items_unset: Boolean
  name_unset: Boolean
  orders_unset: Boolean
  items: [StoreItemUpdateInput]
  location: StoreLocationUpdateInput
  _id: ObjectId
  address: String
  name: String
}
type Query {
  item(query: ItemQueryInput): Item
  items(query: ItemQueryInput, limit: Int = 100, sortBy: ItemSortByInput): [Item]!
  order(query: OrderQueryInput): Order
  orders(query: OrderQueryInput, limit: Int = 100, sortBy: OrderSortByInput): [Order]!
  store(query: StoreQueryInput): Store
  stores(query: StoreQueryInput, limit: Int = 100, sortBy: StoreSortByInput): [Store]!
  user(query: UserQueryInput): User
  users(query: UserQueryInput, limit: Int = 100, sortBy: UserSortByInput): [User]!
}
scalar ObjectId
type StoreLocation {
  lat: Float
  lng: Float
}
enum OrderSortByInput {
  TOTALAMOUNT_ASC
  USER_ASC
  USER_DESC
  UPDATEDON_ASC
  STATUS_DESC
  STORE_ASC
  TOTALAMOUNT_DESC
  CREATEDON_DESC
  STATUS_ASC
  UPDATEDON_DESC
  STORE_DESC
  _ID_ASC
  _ID_DESC
  CREATEDON_ASC
}
type Store {
  _id: ObjectId
  address: String
  items: [StoreItem]
  location: StoreLocation
  name: String
  orders: [Order]
}
type StoreItem {
  item: Item
  price: Float
  quantity: Int
}
enum UserSortByInput {
  _ID_ASC
  CREATEDON_ASC
  LINKID_DESC
  NAME_ASC
  PHONE_ASC
  _ID_DESC
  CREATEDON_DESC
  LINKID_ASC
  NAME_DESC
  PHONE_DESC
}
input OrderUserRelationInput {
  create: UserInsertInput
  link: ObjectId
}
input OrderStoreRelationInput {
  link: ObjectId
  create: StoreInsertInput
}
type InsertManyPayload {
  insertedIds: [ObjectId]!
}
input UserLocationQueryInput {
  lat_lt: Float
  lng_exists: Boolean
  lat_in: [Float]
  lng: Float
  lng_ne: Float
  lng_nin: [Float]
  lat_lte: Float
  lat_gt: Float
  lng_gte: Float
  lng_lte: Float
  lng_in: [Float]
  lat_ne: Float
  lat: Float
  AND: [UserLocationQueryInput!]
  lat_gte: Float
  lng_gt: Float
  lat_exists: Boolean
  lat_nin: [Float]
  lng_lt: Float
  OR: [UserLocationQueryInput!]
}
input UserQueryInput {
  OR: [UserQueryInput!]
  orders_nin: [OrderQueryInput]
  phone_gt: String
  createdOn_gt: DateTime
  name: String
  linkId_ne: String
  createdOn_in: [DateTime]
  linkId_nin: [String]
  address: UserAddressQueryInput
  orders_exists: Boolean
  phone_lte: String
  _id_nin: [ObjectId]
  linkId_gte: String
  name_gt: String
  location_exists: Boolean
  location: UserLocationQueryInput
  phone_gte: String
  linkId: String
  createdOn_lte: DateTime
  createdOn: DateTime
  phone_in: [String]
  phone_exists: Boolean
  createdOn_lt: DateTime
  name_lt: String
  name_exists: Boolean
  _id_lte: ObjectId
  _id_in: [ObjectId]
  orders: [OrderQueryInput]
  linkId_lt: String
  linkId_gt: String
  _id_gte: ObjectId
  name_nin: [String]
  _id_lt: ObjectId
  linkId_exists: Boolean
  name_in: [String]
  _id: ObjectId
  phone: String
  _id_ne: ObjectId
  address_exists: Boolean
  createdOn_exists: Boolean
  orders_in: [OrderQueryInput]
  name_ne: String
  _id_exists: Boolean
  phone_nin: [String]
  phone_ne: String
  linkId_in: [String]
  _id_gt: ObjectId
  createdOn_ne: DateTime
  linkId_lte: String
  name_gte: String
  AND: [UserQueryInput!]
  name_lte: String
  phone_lt: String
  createdOn_nin: [DateTime]
  createdOn_gte: DateTime
}
input UserInsertInput {
  address: UserAddressInsertInput
  createdOn: DateTime
  linkId: String
  location: UserLocationInsertInput
  name: String
  orders: UserOrdersRelationInput
  phone: String
  _id: ObjectId
}
input StoreLocationInsertInput {
  lng: Float
  lat: Float
}
input ItemInsertInput {
  _id: ObjectId
  description: String
  label: String
  unit: String
}
input OrderInsertInput {
  updatedOn: DateTime
  user: OrderUserRelationInput
  _id: ObjectId
  createdOn: DateTime
  items: [OrderItemInsertInput]
  status: String
  store: OrderStoreRelationInput
  totalAmount: Float
}
input StoreOrdersRelationInput {
  create: [OrderInsertInput]
  link: [ObjectId]
}
type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}
input StoreItemUpdateInput {
  item: ObjectId
  item_unset: Boolean
  price: Float
  price_unset: Boolean
  price_inc: Float
  quantity: Int
  quantity_inc: Int
  quantity_unset: Boolean
}
type DeleteManyPayload {
  deletedCount: Int!
}
input UserOrdersRelationInput {
  link: [ObjectId]
  create: [OrderInsertInput]
}
input OrderQueryInput {
  status_gt: String
  OR: [OrderQueryInput!]
  status_lte: String
  _id_gt: ObjectId
  status: String
  user_exists: Boolean
  createdOn_gt: DateTime
  totalAmount_lte: Float
  _id_in: [ObjectId]
  _id_exists: Boolean
  createdOn_in: [DateTime]
  totalAmount_ne: Float
  status_nin: [String]
  totalAmount_exists: Boolean
  _id_lte: ObjectId
  createdOn_nin: [DateTime]
  totalAmount_nin: [Float]
  updatedOn_in: [DateTime]
  status_in: [String]
  items_nin: [OrderItemQueryInput]
  totalAmount_gt: Float
  status_gte: String
  updatedOn_lt: DateTime
  createdOn_exists: Boolean
  _id_ne: ObjectId
  store: StoreQueryInput
  items: [OrderItemQueryInput]
  _id_gte: ObjectId
  totalAmount_gte: Float
  createdOn_ne: DateTime
  _id_lt: ObjectId
  totalAmount_lt: Float
  createdOn_lt: DateTime
  updatedOn_ne: DateTime
  createdOn_lte: DateTime
  store_exists: Boolean
  status_lt: String
  updatedOn_exists: Boolean
  _id_nin: [ObjectId]
  items_exists: Boolean
  updatedOn: DateTime
  _id: ObjectId
  user: UserQueryInput
  totalAmount: Float
  updatedOn_gt: DateTime
  status_ne: String
  updatedOn_nin: [DateTime]
  totalAmount_in: [Float]
  createdOn_gte: DateTime
  AND: [OrderQueryInput!]
  createdOn: DateTime
  status_exists: Boolean
  items_in: [OrderItemQueryInput]
  updatedOn_gte: DateTime
  updatedOn_lte: DateTime
}
input UserAddressQueryInput {
  houseNumber_lt: String
  state_gt: String
  OR: [UserAddressQueryInput!]
  state_gte: String
  houseNumber_gt: String
  landmark_in: [String]
  state_lt: String
  area_exists: Boolean
  area_in: [String]
  locality_ne: String
  landmark_gt: String
  pinCode_nin: [String]
  houseNumber_exists: Boolean
  pinCode_gt: String
  houseNumber_nin: [String]
  street_lte: String
  landmark_exists: Boolean
  state_nin: [String]
  city_nin: [String]
  street_ne: String
  area_nin: [String]
  houseNumber_ne: String
  locality_gt: String
  street_lt: String
  street_in: [String]
  locality: String
  landmark: String
  city_gte: String
  area_lte: String
  houseNumber: String
  city_ne: String
  houseNumber_gte: String
  area_gt: String
  city_lte: String
  street_nin: [String]
  state_exists: Boolean
  landmark_ne: String
  area_ne: String
  city_lt: String
  pinCode_lt: String
  state_lte: String
  city_in: [String]
  street_gte: String
  street_gt: String
  pinCode_ne: String
  locality_exists: Boolean
  houseNumber_lte: String
  locality_in: [String]
  state_ne: String
  locality_nin: [String]
  pinCode: String
  locality_lte: String
  city: String
  locality_lt: String
  street: String
  landmark_lte: String
  locality_gte: String
  state_in: [String]
  area: String
  city_exists: Boolean
  landmark_nin: [String]
  state: String
  city_gt: String
  pinCode_in: [String]
  area_gte: String
  landmark_gte: String
  pinCode_lte: String
  pinCode_gte: String
  landmark_lt: String
  area_lt: String
  street_exists: Boolean
  AND: [UserAddressQueryInput!]
  pinCode_exists: Boolean
  houseNumber_in: [String]
}
type UserLocation {
  lat: Float
  lng: Float
}
type Order {
  _id: ObjectId
  createdOn: DateTime
  items: [OrderItem]
  status: String
  store: Store
  totalAmount: Float
  updatedOn: DateTime
  user: User
}
enum StoreSortByInput {
  NAME_DESC
  _ID_ASC
  _ID_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  NAME_ASC
}
type UserAddress {
  area: String
  city: String
  houseNumber: String
  landmark: String
  locality: String
  pinCode: String
  state: String
  street: String
}
input UserUpdateInput {
  name: String
  _id: ObjectId
  location: UserLocationUpdateInput
  phone: String
  phone_unset: Boolean
  _id_unset: Boolean
  name_unset: Boolean
  orders_unset: Boolean
  address: UserAddressUpdateInput
  createdOn: DateTime
  createdOn_unset: Boolean
  location_unset: Boolean
  linkId_unset: Boolean
  linkId: String
  address_unset: Boolean
  orders: UserOrdersRelationInput
}
input UserLocationUpdateInput {
  lat_inc: Float
  lat_unset: Boolean
  lng: Float
  lng_inc: Float
  lng_unset: Boolean
  lat: Float
}
input UserLocationInsertInput {
  lat: Float
  lng: Float
}
input OrderItemUpdateInput {
  item_unset: Boolean
  price: Float
  price_inc: Float
  price_unset: Boolean
  quantity: Int
  quantity_inc: Int
  quantity_unset: Boolean
  item: ObjectId
}
